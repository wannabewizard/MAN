{"version":3,"sources":["ReadBalance.js","MintTokens.js","App.js","reportWebVitals.js","index.js"],"names":["ReadBalance","state","dataKey","this","props","drizzle","drizzleState","contracts","TestMinter","methods","cacheCall","accounts","setState","balanceOf","value","React","Component","MintTokens","getTxStatus","transactions","txHash","transactionStack","stackId","status","handleClick","bind","cacheSend","from","Heading","as","style","textAlign","Button","size","onClick","App","loading","unsubscribe","store","subscribe","getState","drizzleStatus","initialized","Flex","Box","p","width","Text","Card","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","options","web3","fallback","type","url","Drizzle","ReactDOM","render","StrictMode","BaseStyles","document","getElementById"],"mappings":"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","file":"static/js/main.26383977.chunk.js","sourcesContent":["import React from \"react\";\n\nclass ReadBalance extends React.Component {\n  state = { dataKey: null };\n\n\n  componentDidMount() {\n    const { drizzle, drizzleState } = this.props;\n    const contract = drizzle.contracts.TestMinter;\n    const dataKey = contract.methods[\"balanceOf\"].cacheCall(drizzleState.accounts[0]);\n    this.setState({ dataKey });\n  }\n\n  render() {\n    // get the contract state from drizzleState\n    const { TestMinter } = this.props.drizzleState.contracts;\n\n    // using the saved `dataKey`, get the variable we're interested in\n    const balanceOf = TestMinter.balanceOf[this.state.dataKey];\n\n    // if it exists, then we display its value\n    return <p>Your MAN balance is: {(balanceOf && balanceOf.value)/1000000000000000000}</p>;\n  }\n}\n\nexport default ReadBalance;      ","import React from \"react\";\nimport { Heading, Button } from 'rimble-ui';\n\nclass MintTokens extends React.Component {\n  constructor(props) {\n    super(props);\n    // Don't call this.setState() here!\n    this.state = { stackId: null };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    const { drizzle, drizzleState } = this.props;\n    const contract = drizzle.contracts.TestMinter;\n    \n    // let drizzle know we want to call the 'weeklyMint' method\n    const stackId = contract.methods[\"weeklyMint\"].cacheSend({\n      from: drizzleState.accounts[0]\n    });\n  \n    // save the `stackId` for later reference\n    this.setState({ stackId });\n  };\n\n  getTxStatus = () => {\n    // get the transaction states from the drizzle state\n    const { transactions, transactionStack } = this.props.drizzleState;\n  \n    // get the transaction hash using our saved `stackId`\n    const txHash = transactionStack[this.state.stackId];\n  \n    // if transaction hash does not exist, don't display anything\n    if (!txHash) return null;\n  \n    // otherwise, return the transaction status\n    return `Transaction status: ${transactions[txHash] && transactions[txHash].status}`;\n\n    \n  };  render() {\n    return (\n      <div>\n        <Heading as={\"h3\"} style={{ textAlign: 'center' }}>Mint some MAN</Heading>\n        <p><Button size='large' onClick={this.handleClick}>Mint &#x1F468;&#127995;</Button></p>\n        <p>{this.getTxStatus()}</p>\n      </div>\n    );\n  }\n}\n\nexport default MintTokens;","import { Component } from 'react';\nimport ReadBalance from \"./ReadBalance\";\nimport MintTokens from './MintTokens';\nimport { Card, Flex, Box, Heading, Text } from 'rimble-ui';\nimport './App.css'\n\nclass App extends Component {\n  \n  state = { loading: true, drizzleState: null };\n  \n  componentDidMount() {\n    const { drizzle } = this.props;\n    \n    // subscribe to changes in the store\n    this.unsubscribe = drizzle.store.subscribe(() => {\n  \n      // every time the store updates, grab the state from drizzle\n      const drizzleState = drizzle.store.getState();\n  \n      // check to see if it's ready, if so, update local component state\n      if (drizzleState.drizzleStatus.initialized) {\n        this.setState({ loading: false, drizzleState });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe();\n  }\n\n  render() {\n    if (this.state.loading) return \"Loading Drizzle...\";\n    return (\n      <div>\n        <div style={{ textAlign: 'center' }}>\n          <Flex>\n            <Box p={3} width={1}>\n              <Heading as={\"h1\"} style={{ textAlign: 'center' }}>Welcome</Heading>\n              <Text>To the MAN portal</Text>\n            </Box>\n          </Flex>\n          <Flex>\n            <Box p={3} width={1 / 2}>\n              <Card>\n                <MintTokens\n                  drizzle={this.props.drizzle}\n                  drizzleState={this.state.drizzleState}\n                />\n              </Card>\n            </Box>\n          <Box p={3} width={1 / 2}>\n              <Card>\n                <Heading as={\"h3\"}>Your info</Heading>\n                  <Text>        \n                    <ReadBalance\n                    drizzle={this.props.drizzle}\n                    drizzleState={this.state.drizzleState}\n                    />\n                  </Text>\n              </Card>\n            </Box>\n            <Box p={3} width={1 / 2}>\n              <Card>\n                <div >\n                <Heading as={\"h3\"}>MAN top 4</Heading>\n                </div>\n                <ol>\n                  <li>0xwdda0s020q3839w3wf9wjff039j3jf99dj3110</li>\n                  <li>0xw0dadaa0f20333383393f9jf039j3j99dj3110</li>\n                  <li>0xw0020saa38393ff9jdadaaf039j3j99dj3110</li>\n                  <li>0xw002038393f9jf0we39jwef3fj99dj23r0</li>\n                </ol>\n              </Card>\n            </Box>\n          </Flex>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BaseStyles } from 'rimble-ui';\n\n// import drizzle functions and contract artifact\nimport { Drizzle, generateStore } from \"@drizzle/store\";\nimport TestMinter from \"./contracts/TestMinter.json\";\n\n// let drizzle know what contracts we want and how to access our test blockchain\nconst options = {\n  contracts: [TestMinter],\n  web3: {\n    fallback: {\n      type: \"ws\",\n      url: \"ws://127.0.0.1:9545/\",\n    },\n  },\n};\n\n// setup drizzle\nconst drizzle = new Drizzle(options);\n\nReactDOM.render(\n  <React.StrictMode>\n    <BaseStyles>\n      <App drizzle={drizzle}/>\n    </BaseStyles>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}