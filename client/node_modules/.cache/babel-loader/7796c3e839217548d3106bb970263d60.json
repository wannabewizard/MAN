{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/contooter/Documents/Projects/TestMinterDrizzle/client/src/MintTokens.js\";\nimport React from \"react\";\n\nclass MintTokens extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      stackId: null\n    };\n\n    this.getTxStatus = () => {\n      // get the transaction states from the drizzle state\n      const {\n        transactions,\n        transactionStack\n      } = this.props.drizzleState; // get the transaction hash using our saved `stackId`\n\n      const txHash = transactionStack[this.state.stackId]; // if transaction hash does not exist, don't display anything\n\n      if (!txHash) return null; // otherwise, return the transaction status\n\n      return `Transaction status: ${transactions[txHash] && transactions[txHash].status}`;\n    };\n  }\n\n  handleClick() {\n    const {\n      drizzle,\n      drizzleState\n    } = this.props;\n    const contract = drizzle.contracts.TestMinter; // let drizzle know we want to call the `set` method with `value`\n\n    const stackId = contract.methods[\"weeklyMint\"].cacheSend({\n      from: drizzleState.accounts[0]\n    }); // save the `stackId` for later reference\n\n    this.setState({\n      stackId\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleClick,\n        children: \"Mint\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.getTxStatus()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default MintTokens;","map":{"version":3,"sources":["/home/contooter/Documents/Projects/TestMinterDrizzle/client/src/MintTokens.js"],"names":["React","MintTokens","Component","state","stackId","getTxStatus","transactions","transactionStack","props","drizzleState","txHash","status","handleClick","drizzle","contract","contracts","TestMinter","methods","cacheSend","from","accounts","setState","render"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,UAAN,SAAyBD,KAAK,CAACE,SAA/B,CAAyC;AAAA;AAAA;AAAA,SACvCC,KADuC,GAC/B;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAD+B;;AAAA,SAgBvCC,WAhBuC,GAgBzB,MAAM;AAClB;AACA,YAAM;AAAEC,QAAAA,YAAF;AAAgBC,QAAAA;AAAhB,UAAqC,KAAKC,KAAL,CAAWC,YAAtD,CAFkB,CAIlB;;AACA,YAAMC,MAAM,GAAGH,gBAAgB,CAAC,KAAKJ,KAAL,CAAWC,OAAZ,CAA/B,CALkB,CAOlB;;AACA,UAAI,CAACM,MAAL,EAAa,OAAO,IAAP,CARK,CAUlB;;AACA,aAAQ,uBAAsBJ,YAAY,CAACI,MAAD,CAAZ,IAAwBJ,YAAY,CAACI,MAAD,CAAZ,CAAqBC,MAAO,EAAlF;AACD,KA5BsC;AAAA;;AAGvCC,EAAAA,WAAW,GAAG;AACZ,UAAM;AAAEC,MAAAA,OAAF;AAAWJ,MAAAA;AAAX,QAA4B,KAAKD,KAAvC;AACA,UAAMM,QAAQ,GAAGD,OAAO,CAACE,SAAR,CAAkBC,UAAnC,CAFY,CAIZ;;AACA,UAAMZ,OAAO,GAAGU,QAAQ,CAACG,OAAT,CAAiB,YAAjB,EAA+BC,SAA/B,CAAyC;AACvDC,MAAAA,IAAI,EAAEV,YAAY,CAACW,QAAb,CAAsB,CAAtB;AADiD,KAAzC,CAAhB,CALY,CASZ;;AACA,SAAKC,QAAL,CAAc;AAAEjB,MAAAA;AAAF,KAAd;AACD;;AAgBDkB,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE;AAAQ,QAAA,OAAO,EAAE,KAAKV,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,kBAAM,KAAKP,WAAL;AAAN;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;;AArCsC;;AAwCzC,eAAeJ,UAAf","sourcesContent":["import React from \"react\";\n\nclass MintTokens extends React.Component {\n  state = { stackId: null };\n\n  handleClick() {\n    const { drizzle, drizzleState } = this.props;\n    const contract = drizzle.contracts.TestMinter;\n  \n    // let drizzle know we want to call the `set` method with `value`\n    const stackId = contract.methods[\"weeklyMint\"].cacheSend({\n      from: drizzleState.accounts[0]\n    });\n  \n    // save the `stackId` for later reference\n    this.setState({ stackId });\n  };\n\n  getTxStatus = () => {\n    // get the transaction states from the drizzle state\n    const { transactions, transactionStack } = this.props.drizzleState;\n  \n    // get the transaction hash using our saved `stackId`\n    const txHash = transactionStack[this.state.stackId];\n  \n    // if transaction hash does not exist, don't display anything\n    if (!txHash) return null;\n  \n    // otherwise, return the transaction status\n    return `Transaction status: ${transactions[txHash] && transactions[txHash].status}`;\n  };\n\n  render() {\n    return (\n      <div>\n        <button onClick={this.handleClick}>Mint</button>\n        <div>{this.getTxStatus()}</div>\n      </div>\n    );\n  }\n}\n\nexport default MintTokens;"]},"metadata":{},"sourceType":"module"}