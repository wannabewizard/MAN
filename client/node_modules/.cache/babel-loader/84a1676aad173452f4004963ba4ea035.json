{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('bowser')) : typeof define === 'function' && define.amd ? define('@rimble/utils', ['bowser'], factory) : (global = global || self, global.RimbleUtils = factory(global.Bowser));\n})(this, function (Bowser) {\n  'use strict';\n\n  Bowser = Bowser && Bowser.hasOwnProperty('default') ? Bowser['default'] : Bowser;\n  var funcs = {\n    browserIsWeb3Capable: function browserIsWeb3Capable() {\n      // User Agent\n      var browser = Bowser.getParser(window.navigator.userAgent);\n      var userAgent = browser.parse().parsedResult;\n      var validBrowser = browser.satisfies({\n        desktop: {\n          chrome: '>49',\n          firefox: '>52',\n          opera: '>36'\n        }\n      }) ? true : false;\n      var web3Capable = validBrowser || funcs.hasWeb3Available();\n      return web3Capable;\n    },\n    // Returns a network name based on a network ID\n    getEthNetworkNameById: function getEthNetworkNameById(networkId) {\n      var networkName = '';\n\n      if (typeof networkId === 'undefined') {\n        networkId = '';\n      }\n\n      switch (networkId) {\n        case 1:\n          networkName = 'Main';\n          break;\n\n        case 3:\n          networkName = 'Ropsten';\n          break;\n\n        case 4:\n          networkName = 'Rinkeby';\n          break;\n\n        case 5:\n          networkName = 'Goerli';\n          break;\n\n        case 42:\n          networkName = 'Kovan';\n          break;\n\n        case '':\n          networkName = 'None';\n          break;\n\n        default:\n          networkName = 'Custom';\n          break;\n      }\n\n      return networkName;\n    },\n    // Current browser is detected as mobile\n    isMobileDevice: function isMobileDevice() {\n      var mobilePlatform = /Mobi|Android/i.test(navigator.userAgent) ? true : false;\n      return mobilePlatform;\n    },\n    // Checks browser window for available web3 or ethereum objects\n    hasWeb3Available: function hasWeb3Available() {\n      var web3 = typeof window.web3 !== 'undefined';\n      var ethereum = typeof window.ethereum !== 'undefined';\n      var web3Available = web3 || ethereum;\n      return web3Available;\n    }\n  };\n  return funcs;\n});","map":{"version":3,"sources":["../src/index.js"],"names":["funcs","browserIsWeb3Capable","browser","Bowser","window","userAgent","validBrowser","desktop","chrome","firefox","opera","web3Capable","getEthNetworkNameById","networkName","networkId","isMobileDevice","mobilePlatform","navigator","hasWeb3Available","web3","ethereum","web3Available"],"mappings":";;;;;;AAGA,MAAMA,KAAK,GAAG;AACZC,IAAAA,oBAAoB,EAAE,SAAA,oBAAA,GAAM;AAC1B;AACA,UAAMC,OAAO,GAAGC,MAAM,CAANA,SAAAA,CAAiBC,MAAM,CAANA,SAAAA,CAAjC,SAAgBD,CAAhB;AACA,UAAME,SAAS,GAAGH,OAAO,CAAPA,KAAAA,GAAlB,YAAA;AAEA,UAAMI,YAAY,GAAG,OAAO,CAAP,SAAA,CAAkB;AACrCC,QAAAA,OAAO,EAAE;AACPC,UAAAA,MAAM,EADC,KAAA;AAEPC,UAAAA,OAAO,EAFA,KAAA;AAGPC,UAAAA,KAAK,EAAE;AAHA;AAD4B,OAAlB,IAAA,IAAA,GAArB,KAAA;AAUA,UAAMC,WAAW,GAAGL,YAAY,IAAIN,KAAK,CAAzC,gBAAoCA,EAApC;AAEA,aAAA,WAAA;AAlBU,KAAA;AAqBZ;AACAY,IAAAA,qBAAqB,EAAE,SAAA,qBAAA,CAAA,SAAA,EAAa;AAClC,UAAIC,WAAW,GAAf,EAAA;;AAEA,UAAI,OAAA,SAAA,KAAJ,WAAA,EAAsC;AACpCC,QAAAA,SAAS,GAATA,EAAAA;AACD;;AAED,cAAA,SAAA;AACE,aAAA,CAAA;AACED,UAAAA,WAAW,GAAXA,MAAAA;AACA;;AACF,aAAA,CAAA;AACEA,UAAAA,WAAW,GAAXA,SAAAA;AACA;;AACF,aAAA,CAAA;AACEA,UAAAA,WAAW,GAAXA,SAAAA;AACA;;AACF,aAAA,CAAA;AACEA,UAAAA,WAAW,GAAXA,QAAAA;AACA;;AACF,aAAA,EAAA;AACEA,UAAAA,WAAW,GAAXA,OAAAA;AACA;;AACF,aAAA,EAAA;AACEA,UAAAA,WAAW,GAAXA,MAAAA;AACA;;AACF;AACEA,UAAAA,WAAW,GAAXA,QAAAA;AACA;AArBJ;;AAuBA,aAAA,WAAA;AApDU,KAAA;AAuDZ;AACAE,IAAAA,cAAc,EAAE,SAAA,cAAA,GAAM;AACpB,UAAMC,cAAc,GAAG,gBAAA,IAAA,CAAqBC,SAAS,CAA9B,SAAA,IAAA,IAAA,GAAvB,KAAA;AAIA,aAAA,cAAA;AA7DU,KAAA;AAgEZ;AACAC,IAAAA,gBAAgB,EAAE,SAAA,gBAAA,GAAM;AACtB,UAAMC,IAAI,GAAG,OAAOf,MAAM,CAAb,IAAA,KAAb,WAAA;AACA,UAAMgB,QAAQ,GAAG,OAAOhB,MAAM,CAAb,QAAA,KAAjB,WAAA;AACA,UAAMiB,aAAa,GAAGF,IAAI,IAA1B,QAAA;AAEA,aAAA,aAAA;AACD;AAvEW,GAAd","sourcesContent":["import Bowser from 'bowser';\n\n// Validates user's browser is web3 capable\nconst funcs = {\n  browserIsWeb3Capable: () => {\n    // User Agent\n    const browser = Bowser.getParser(window.navigator.userAgent);\n    const userAgent = browser.parse().parsedResult;\n\n    const validBrowser = browser.satisfies({\n      desktop: {\n        chrome: '>49',\n        firefox: '>52',\n        opera: '>36',\n      },\n    })\n      ? true\n      : false;\n\n    const web3Capable = validBrowser || funcs.hasWeb3Available();\n\n    return web3Capable;\n  },\n\n  // Returns a network name based on a network ID\n  getEthNetworkNameById: networkId => {\n    let networkName = '';\n\n    if (typeof networkId === 'undefined') {\n      networkId = '';\n    }\n\n    switch (networkId) {\n      case 1:\n        networkName = 'Main';\n        break;\n      case 3:\n        networkName = 'Ropsten';\n        break;\n      case 4:\n        networkName = 'Rinkeby';\n        break;\n      case 5:\n        networkName = 'Goerli';\n        break;\n      case 42:\n        networkName = 'Kovan';\n        break;\n      case '':\n        networkName = 'None';\n        break;\n      default:\n        networkName = 'Custom';\n        break;\n    }\n    return networkName;\n  },\n\n  // Current browser is detected as mobile\n  isMobileDevice: () => {\n    const mobilePlatform = /Mobi|Android/i.test(navigator.userAgent)\n      ? true\n      : false;\n\n    return mobilePlatform;\n  },\n\n  // Checks browser window for available web3 or ethereum objects\n  hasWeb3Available: () => {\n    const web3 = typeof window.web3 !== 'undefined';\n    const ethereum = typeof window.ethereum !== 'undefined';\n    const web3Available = web3 || ethereum;\n\n    return web3Available;\n  },\n};\n\nexport default funcs;\n"]},"metadata":{},"sourceType":"script"}