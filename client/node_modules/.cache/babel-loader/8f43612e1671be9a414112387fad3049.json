{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('react'), require('prop-types'), require('@rimble/utils'), require('rimble-ui')) : typeof define === 'function' && define.amd ? define('@rimble/network-indicator', ['react', 'prop-types', '@rimble/utils', 'rimble-ui'], factory) : (global = global || self, global['@rimble/network-indicator'] = factory(global.React, global.PropTypes, global.RimbleUtils, global.RimbleUi));\n})(this, function (React, PropTypes, RimbleUtils, rimbleUi) {\n  'use strict';\n\n  React = React && React.hasOwnProperty('default') ? React['default'] : React;\n  PropTypes = PropTypes && PropTypes.hasOwnProperty('default') ? PropTypes['default'] : PropTypes;\n  RimbleUtils = RimbleUtils && RimbleUtils.hasOwnProperty('default') ? RimbleUtils['default'] : RimbleUtils;\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n  }\n\n  function _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n      return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n  }\n\n  function _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n      o.__proto__ = p;\n      return o;\n    };\n\n    return _setPrototypeOf(o, p);\n  }\n\n  function _assertThisInitialized(self) {\n    if (self === void 0) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return self;\n  }\n\n  function _possibleConstructorReturn(self, call) {\n    if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n      return call;\n    }\n\n    return _assertThisInitialized(self);\n  }\n\n  var RightNetwork = function RightNetwork(_ref) {\n    var currentNetwork = _ref.currentNetwork,\n        onNetworkMessage = _ref.onNetworkMessage;\n    var tooltipMessage = onNetworkMessage === null ? \"You're on the right network\" : onNetworkMessage;\n    return React.createElement(rimbleUi.Tooltip, {\n      message: tooltipMessage,\n      placement: \"bottom\"\n    }, React.createElement(rimbleUi.Flex, null, React.createElement(rimbleUi.Text, {\n      mr: 2\n    }, RimbleUtils.getEthNetworkNameById(currentNetwork)), React.createElement(rimbleUi.Icon, {\n      name: \"CheckCircle\",\n      color: \"#28C081\"\n    })));\n  };\n\n  RightNetwork.propTypes = {\n    currentNetwork: PropTypes.number.isRequired\n  };\n\n  var WrongNetwork = function WrongNetwork(_ref2) {\n    var currentNetwork = _ref2.currentNetwork,\n        requiredNetwork = _ref2.requiredNetwork,\n        onWrongNetworkMessage = _ref2.onWrongNetworkMessage;\n    var tooltipMessage = onWrongNetworkMessage === null ? \"You're on the wrong network\" : onWrongNetworkMessage;\n    return React.createElement(rimbleUi.Tooltip, {\n      message: tooltipMessage\n    }, React.createElement(rimbleUi.Flex, null, React.createElement(rimbleUi.Text, {\n      mr: 2\n    }, RimbleUtils.getEthNetworkNameById(currentNetwork)), React.createElement(rimbleUi.Icon, {\n      name: \"Error\",\n      color: \"#DC2C10\"\n    })));\n  };\n\n  WrongNetwork.propTypes = {\n    currentNetwork: PropTypes.number.isRequired,\n    requiredNetwork: PropTypes.number.isRequired,\n    onWrongNetworkMessage: PropTypes.string\n  };\n\n  var NoNetwork = function NoNetwork(_ref3) {\n    var noNetworkMessage = _ref3.noNetworkMessage;\n    var tooltipMessage = noNetworkMessage === null ? \"You're not on an Ethereum network\" : noNetworkMessage;\n    return React.createElement(rimbleUi.Tooltip, {\n      message: tooltipMessage\n    }, React.createElement(rimbleUi.Flex, null, React.createElement(rimbleUi.Text, {\n      mr: 2\n    }, \"None\"), React.createElement(rimbleUi.Icon, {\n      name: \"Error\",\n      color: \"#DC2C10\"\n    })));\n  };\n\n  var OnNetwork = function OnNetwork(_ref4) {\n    var currentNetwork = _ref4.currentNetwork,\n        onNetworkMessage = _ref4.onNetworkMessage;\n    return React.createElement(\"div\", null, onNetworkMessage === null ? React.createElement(rimbleUi.Flex, null, React.createElement(rimbleUi.Text, {\n      mr: 2\n    }, RimbleUtils.getEthNetworkNameById(currentNetwork))) : React.createElement(rimbleUi.Tooltip, {\n      message: onNetworkMessage\n    }, React.createElement(rimbleUi.Flex, null, React.createElement(rimbleUi.Text, {\n      mr: 2\n    }, RimbleUtils.getEthNetworkNameById(currentNetwork)))));\n  };\n\n  OnNetwork.propTypes = {\n    currentNetwork: PropTypes.number.isRequired\n  };\n\n  var NetworkIndicator = /*#__PURE__*/function (_React$Component) {\n    _inherits(NetworkIndicator, _React$Component);\n\n    function NetworkIndicator() {\n      var _getPrototypeOf2;\n\n      var _this;\n\n      _classCallCheck(this, NetworkIndicator);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(NetworkIndicator)).call.apply(_getPrototypeOf2, [this].concat(args)));\n      _this.state = {\n        isCorrectNetwork: null\n      };\n\n      _this.checkCorrectNetwork = function () {\n        var isCorrectNetwork = _this.props.currentNetwork === _this.props.requiredNetwork;\n\n        if (isCorrectNetwork !== _this.state.isCorrectNetwork) {\n          _this.setState({\n            isCorrectNetwork: isCorrectNetwork\n          });\n        }\n      };\n\n      return _this;\n    }\n\n    _createClass(NetworkIndicator, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        if (this.props.currentNetwork && this.props.requiredNetwork) {\n          this.checkCorrectNetwork();\n        }\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate() {\n        if (this.props.currentNetwork && this.props.requiredNetwork) {\n          this.checkCorrectNetwork();\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this$props = this.props,\n            currentNetwork = _this$props.currentNetwork,\n            requiredNetwork = _this$props.requiredNetwork;\n        var _this$props$children = this.props.children,\n            onNetworkMessage = _this$props$children.onNetworkMessage,\n            noNetworkMessage = _this$props$children.noNetworkMessage,\n            onRequiredNetworkMessage = _this$props$children.onRequiredNetworkMessage,\n            onWrongNetworkMessage = _this$props$children.onWrongNetworkMessage;\n        return React.createElement(rimbleUi.Box, null, React.createElement(rimbleUi.Box, {\n          display: \"inline-block\"\n        }, React.createElement(rimbleUi.Flex, {\n          flexDirection: \"column\"\n        }, React.createElement(rimbleUi.Text, {\n          fontSize: 1,\n          color: \"#a2a2a2\",\n          caps: true\n        }, \"Current Network\"), this.state.isCorrectNetwork && requiredNetwork ? // Has requiredNetwork prop\n        React.createElement(RightNetwork, {\n          currentNetwork: currentNetwork,\n          onNetworkMessage: onNetworkMessage\n        }) : this.state.isCorrectNetwork === false && requiredNetwork ? // Has requiredNetwork prop\n        React.createElement(WrongNetwork, {\n          currentNetwork: currentNetwork,\n          requiredNetwork: requiredNetwork,\n          onWrongNetworkMessage: onWrongNetworkMessage\n        }) : this.state.isCorrectNetwork === null && requiredNetwork ? // Has requiredNetwork prop\n        React.createElement(NoNetwork, {\n          noNetworkMessage: noNetworkMessage\n        }) : currentNetwork ? React.createElement(OnNetwork, {\n          currentNetwork: currentNetwork,\n          onNetworkMessage: onNetworkMessage\n        }) : React.createElement(NoNetwork, {\n          noNetworkMessage: noNetworkMessage\n        }))));\n      }\n    }]);\n\n    return NetworkIndicator;\n  }(React.Component);\n\n  NetworkIndicator.propTypes = {\n    currentNetwork: PropTypes.number,\n    requiredNetwork: PropTypes.number,\n    children: PropTypes.shape({\n      onNetworkMessage: PropTypes.string,\n      noNetworkMessage: PropTypes.string,\n      onRequiredNetworkMessage: PropTypes.string,\n      onWrongNetworkMessage: PropTypes.string\n    })\n  };\n  NetworkIndicator.defaultProps = {\n    currentNetwork: null,\n    requiredNetwork: null,\n    children: {\n      onNetworkMessage: null,\n      noNetworkMessage: null,\n      onRequiredNetworkMessage: null,\n      onWrongNetworkMessage: null\n    }\n  };\n  NetworkIndicator.propTypes = {\n    currentNetwork: PropTypes.number,\n    requiredNetwork: PropTypes.number\n  };\n  return NetworkIndicator;\n});","map":{"version":3,"sources":["../src/index.js"],"names":["RightNetwork","currentNetwork","onNetworkMessage","tooltipMessage","Tooltip","Flex","Text","RimbleUtils","Icon","PropTypes","isRequired","WrongNetwork","requiredNetwork","onWrongNetworkMessage","string","NoNetwork","noNetworkMessage","OnNetwork","NetworkIndicator","React","Component","propTypes","children","onRequiredNetworkMessage","defaultProps","state","isCorrectNetwork","checkCorrectNetwork","Box","number"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport RimbleUtils from '@rimble/utils';\nimport { Flex, Text, Icon, Tooltip, Box } from 'rimble-ui';\n\nconst RightNetwork = ({ currentNetwork, onNetworkMessage }) => {\n  const tooltipMessage =\n    onNetworkMessage === null\n      ? `You're on the right network`\n      : onNetworkMessage;\n  return (\n    <Tooltip message={tooltipMessage} placement=\"bottom\">\n      <Flex>\n        <Text mr={2}>{RimbleUtils.getEthNetworkNameById(currentNetwork)}</Text>\n        <Icon name=\"CheckCircle\" color=\"#28C081\" />\n      </Flex>\n    </Tooltip>\n  );\n};\n\nRightNetwork.propTypes = {\n  currentNetwork: PropTypes.number.isRequired,\n};\n\nconst WrongNetwork = ({\n  currentNetwork,\n  requiredNetwork,\n  onWrongNetworkMessage,\n}) => {\n  const tooltipMessage =\n    onWrongNetworkMessage === null\n      ? `You're on the wrong network`\n      : onWrongNetworkMessage;\n  return (\n    <Tooltip message={tooltipMessage}>\n      <Flex>\n        <Text mr={2}>{RimbleUtils.getEthNetworkNameById(currentNetwork)}</Text>\n        <Icon name=\"Error\" color=\"#DC2C10\" />\n      </Flex>\n    </Tooltip>\n  );\n};\n\nWrongNetwork.propTypes = {\n  currentNetwork: PropTypes.number.isRequired,\n  requiredNetwork: PropTypes.number.isRequired,\n  onWrongNetworkMessage: PropTypes.string,\n};\n\nconst NoNetwork = ({ noNetworkMessage }) => {\n  const tooltipMessage =\n    noNetworkMessage === null\n      ? `You're not on an Ethereum network`\n      : noNetworkMessage;\n  return (\n    <Tooltip message={tooltipMessage}>\n      <Flex>\n        <Text mr={2}>None</Text>\n        <Icon name=\"Error\" color=\"#DC2C10\" />\n      </Flex>\n    </Tooltip>\n  );\n};\n\nconst OnNetwork = ({ currentNetwork, onNetworkMessage }) => {\n  return (\n    <div>\n      {onNetworkMessage === null ? (\n        <Flex>\n          <Text mr={2}>\n            {RimbleUtils.getEthNetworkNameById(currentNetwork)}\n          </Text>\n        </Flex>\n      ) : (\n        <Tooltip message={onNetworkMessage}>\n          <Flex>\n            <Text mr={2}>\n              {RimbleUtils.getEthNetworkNameById(currentNetwork)}\n            </Text>\n          </Flex>\n        </Tooltip>\n      )}\n    </div>\n  );\n};\n\nOnNetwork.propTypes = {\n  currentNetwork: PropTypes.number.isRequired,\n};\n\nclass NetworkIndicator extends React.Component {\n  static propTypes = {\n    currentNetwork: PropTypes.number,\n    requiredNetwork: PropTypes.number,\n    children: PropTypes.shape({\n      onNetworkMessage: PropTypes.string,\n      noNetworkMessage: PropTypes.string,\n      onRequiredNetworkMessage: PropTypes.string,\n      onWrongNetworkMessage: PropTypes.string,\n    }),\n  };\n  static defaultProps = {\n    currentNetwork: null,\n    requiredNetwork: null,\n    children: {\n      onNetworkMessage: null,\n      noNetworkMessage: null,\n      onRequiredNetworkMessage: null,\n      onWrongNetworkMessage: null,\n    },\n  };\n\n  state = {\n    isCorrectNetwork: null,\n  };\n\n  componentDidMount() {\n    if (this.props.currentNetwork && this.props.requiredNetwork) {\n      this.checkCorrectNetwork();\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.props.currentNetwork && this.props.requiredNetwork) {\n      this.checkCorrectNetwork();\n    }\n  }\n\n  checkCorrectNetwork = () => {\n    const isCorrectNetwork =\n      this.props.currentNetwork === this.props.requiredNetwork;\n\n    if (isCorrectNetwork !== this.state.isCorrectNetwork) {\n      this.setState({ isCorrectNetwork });\n    }\n  };\n\n  render() {\n    const { currentNetwork, requiredNetwork } = this.props;\n\n    const {\n      onNetworkMessage,\n      noNetworkMessage,\n      onRequiredNetworkMessage,\n      onWrongNetworkMessage,\n    } = this.props.children;\n\n    return (\n      <Box>\n        <Box display=\"inline-block\">\n          <Flex flexDirection=\"column\">\n            <Text fontSize={1} color=\"#a2a2a2\" caps>\n              Current Network\n            </Text>\n            {this.state.isCorrectNetwork && requiredNetwork ? (\n              // Has requiredNetwork prop\n              <RightNetwork\n                currentNetwork={currentNetwork}\n                onNetworkMessage={onNetworkMessage}\n              />\n            ) : this.state.isCorrectNetwork === false && requiredNetwork ? (\n              // Has requiredNetwork prop\n              <WrongNetwork\n                currentNetwork={currentNetwork}\n                requiredNetwork={requiredNetwork}\n                onWrongNetworkMessage={onWrongNetworkMessage}\n              />\n            ) : this.state.isCorrectNetwork === null && requiredNetwork ? (\n              // Has requiredNetwork prop\n              <NoNetwork noNetworkMessage={noNetworkMessage} />\n            ) : currentNetwork ? (\n              <OnNetwork\n                currentNetwork={currentNetwork}\n                onNetworkMessage={onNetworkMessage}\n              />\n            ) : (\n              <NoNetwork noNetworkMessage={noNetworkMessage} />\n            )}\n          </Flex>\n        </Box>\n      </Box>\n    );\n  }\n}\n\nNetworkIndicator.propTypes = {\n  currentNetwork: PropTypes.number,\n  requiredNetwork: PropTypes.number,\n};\n\nexport default NetworkIndicator;\n"]},"metadata":{},"sourceType":"script"}