{"ast":null,"code":"import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import _classCallCheck from\"/home/contooter/Documents/Projects/MAN2/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/contooter/Documents/Projects/MAN2/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"/home/contooter/Documents/Projects/MAN2/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/home/contooter/Documents/Projects/MAN2/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/contooter/Documents/Projects/MAN2/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from\"react\";import{Heading,Button}from'rimble-ui';var MintTokens=/*#__PURE__*/function(_React$Component){_inherits(MintTokens,_React$Component);var _super=_createSuper(MintTokens);function MintTokens(props){var _this;_classCallCheck(this,MintTokens);_this=_super.call(this,props);// Don't call this.setState() here!\n_this.getTxStatus=function(){// get the transaction states from the drizzle state\nvar _this$props$drizzleSt=_this.props.drizzleState,transactions=_this$props$drizzleSt.transactions,transactionStack=_this$props$drizzleSt.transactionStack;// get the transaction hash using our saved `stackId`\nvar txHash=transactionStack[_this.state.stackId];// if transaction hash does not exist, don't display anything\nif(!txHash)return null;// otherwise, return the transaction status\nreturn\"Transaction status: \".concat(transactions[txHash]&&transactions[txHash].status);};_this.state={stackId:null};_this.handleClick=_this.handleClick.bind(_assertThisInitialized(_this));return _this;}_createClass(MintTokens,[{key:\"handleClick\",value:function handleClick(){var _this$props=this.props,drizzle=_this$props.drizzle,drizzleState=_this$props.drizzleState;var contract=drizzle.contracts.TestMinter;// let drizzle know we want to call the 'weeklyMint' method\nvar stackId=contract.methods[\"weeklyMint\"].cacheSend({from:drizzleState.accounts[0]});// save the `stackId` for later reference\nthis.setState({stackId:stackId});}},{key:\"render\",value:function render(){return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Heading,{as:\"h3\",style:{textAlign:'center'},children:\"Mint some MAN\"}),/*#__PURE__*/_jsx(\"p\",{children:/*#__PURE__*/_jsx(Button,{size:\"large\",onClick:this.handleClick,children:\"Mint \\uD83D\\uDC68\\uD83C\\uDFFB\"})}),/*#__PURE__*/_jsx(\"p\",{children:this.getTxStatus()})]});}}]);return MintTokens;}(React.Component);export default MintTokens;","map":{"version":3,"sources":["/home/contooter/Documents/Projects/MAN2/client/src/MintTokens.js"],"names":["React","Heading","Button","MintTokens","props","getTxStatus","drizzleState","transactions","transactionStack","txHash","state","stackId","status","handleClick","bind","drizzle","contract","contracts","TestMinter","methods","cacheSend","from","accounts","setState","textAlign","Component"],"mappings":"i5BAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,OAAT,CAAkBC,MAAlB,KAAgC,WAAhC,C,GAEMC,CAAAA,U,oHACJ,oBAAYC,KAAZ,CAAmB,4CACjB,uBAAMA,KAAN,EACA;AAFiB,MAoBnBC,WApBmB,CAoBL,UAAM,CAClB;AADkB,0BAEyB,MAAKD,KAAL,CAAWE,YAFpC,CAEVC,YAFU,uBAEVA,YAFU,CAEIC,gBAFJ,uBAEIA,gBAFJ,CAIlB;AACA,GAAMC,CAAAA,MAAM,CAAGD,gBAAgB,CAAC,MAAKE,KAAL,CAAWC,OAAZ,CAA/B,CAEA;AACA,GAAI,CAACF,MAAL,CAAa,MAAO,KAAP,CAEb;AACA,oCAA8BF,YAAY,CAACE,MAAD,CAAZ,EAAwBF,YAAY,CAACE,MAAD,CAAZ,CAAqBG,MAA3E,EAGD,CAlCkB,CAGjB,MAAKF,KAAL,CAAa,CAAEC,OAAO,CAAE,IAAX,CAAb,CACA,MAAKE,WAAL,CAAmB,MAAKA,WAAL,CAAiBC,IAAjB,+BAAnB,CAJiB,aAKlB,C,wEAEa,iBACsB,KAAKV,KAD3B,CACJW,OADI,aACJA,OADI,CACKT,YADL,aACKA,YADL,CAEZ,GAAMU,CAAAA,QAAQ,CAAGD,OAAO,CAACE,SAAR,CAAkBC,UAAnC,CAEA;AACA,GAAMP,CAAAA,OAAO,CAAGK,QAAQ,CAACG,OAAT,CAAiB,YAAjB,EAA+BC,SAA/B,CAAyC,CACvDC,IAAI,CAAEf,YAAY,CAACgB,QAAb,CAAsB,CAAtB,CADiD,CAAzC,CAAhB,CAIA;AACA,KAAKC,QAAL,CAAc,CAAEZ,OAAO,CAAPA,OAAF,CAAd,EACD,C,uCAgBY,CACX,mBACE,oCACE,KAAC,OAAD,EAAS,EAAE,CAAE,IAAb,CAAmB,KAAK,CAAE,CAAEa,SAAS,CAAE,QAAb,CAA1B,2BADF,cAEE,gCAAG,KAAC,MAAD,EAAQ,IAAI,CAAC,OAAb,CAAqB,OAAO,CAAE,KAAKX,WAAnC,2CAAH,EAFF,cAGE,mBAAI,KAAKR,WAAL,EAAJ,EAHF,GADF,CAOD,C,wBA3CsBL,KAAK,CAACyB,S,EA8C/B,cAAetB,CAAAA,UAAf","sourcesContent":["import React from \"react\";\nimport { Heading, Button } from 'rimble-ui';\n\nclass MintTokens extends React.Component {\n  constructor(props) {\n    super(props);\n    // Don't call this.setState() here!\n    this.state = { stackId: null };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    const { drizzle, drizzleState } = this.props;\n    const contract = drizzle.contracts.TestMinter;\n    \n    // let drizzle know we want to call the 'weeklyMint' method\n    const stackId = contract.methods[\"weeklyMint\"].cacheSend({\n      from: drizzleState.accounts[0]\n    });\n  \n    // save the `stackId` for later reference\n    this.setState({ stackId });\n  };\n\n  getTxStatus = () => {\n    // get the transaction states from the drizzle state\n    const { transactions, transactionStack } = this.props.drizzleState;\n  \n    // get the transaction hash using our saved `stackId`\n    const txHash = transactionStack[this.state.stackId];\n  \n    // if transaction hash does not exist, don't display anything\n    if (!txHash) return null;\n  \n    // otherwise, return the transaction status\n    return `Transaction status: ${transactions[txHash] && transactions[txHash].status}`;\n\n    \n  };  render() {\n    return (\n      <div>\n        <Heading as={\"h3\"} style={{ textAlign: 'center' }}>Mint some MAN</Heading>\n        <p><Button size='large' onClick={this.handleClick}>Mint &#x1F468;&#127995;</Button></p>\n        <p>{this.getTxStatus()}</p>\n      </div>\n    );\n  }\n}\n\nexport default MintTokens;"]},"metadata":{},"sourceType":"module"}